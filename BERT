{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyO3XhYNIxGl6DOHEF7odesJ"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"j8j0kiT3HMtQ","executionInfo":{"status":"ok","timestamp":1664455887680,"user_tz":-540,"elapsed":2976,"user":{"displayName":"서준혁","userId":"07154100412931741259"}},"outputId":"cffebe7d-d039-42e1-8fba-f10640d51132"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AUyr506o_A1L","executionInfo":{"status":"ok","timestamp":1664455891434,"user_tz":-540,"elapsed":3757,"user":{"displayName":"서준혁","userId":"07154100412931741259"}},"outputId":"333cb0df-7283-4261-ff44-98f3b601546c"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: transformers in /usr/local/lib/python3.7/dist-packages (3.0.2)\n","Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from transformers) (2.23.0)\n","Requirement already satisfied: sentencepiece!=0.1.92 in /usr/local/lib/python3.7/dist-packages (from transformers) (0.1.97)\n","Requirement already satisfied: sacremoses in /usr/local/lib/python3.7/dist-packages (from transformers) (0.0.53)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.7/dist-packages (from transformers) (3.8.0)\n","Requirement already satisfied: tokenizers==0.8.1.rc1 in /usr/local/lib/python3.7/dist-packages (from transformers) (0.8.1rc1)\n","Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.7/dist-packages (from transformers) (2022.6.2)\n","Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.7/dist-packages (from transformers) (4.64.1)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.7/dist-packages (from transformers) (21.3)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from transformers) (1.21.6)\n","Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging->transformers) (3.0.9)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (1.24.3)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (3.0.4)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (2.10)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (2022.6.15)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from sacremoses->transformers) (1.15.0)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.7/dist-packages (from sacremoses->transformers) (1.1.0)\n","Requirement already satisfied: click in /usr/local/lib/python3.7/dist-packages (from sacremoses->transformers) (7.1.2)\n"]}],"source":["!pip install transformers"]},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import os\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from transformers import BertTokenizer"],"metadata":{"id":"CXepPhhO_MVu","executionInfo":{"status":"ok","timestamp":1664455895510,"user_tz":-540,"elapsed":4087,"user":{"displayName":"서준혁","userId":"07154100412931741259"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["%cd drive/MyDrive/NER"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IrBZ9iuzHlxX","executionInfo":{"status":"ok","timestamp":1664455896088,"user_tz":-540,"elapsed":585,"user":{"displayName":"서준혁","userId":"07154100412931741259"}},"outputId":"60dab70f-8981-4736-f83a-0d2186052594"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/NER\n"]}]},{"cell_type":"code","source":["PATH = \"./\"\n","PATH_TRAIN = os.path.join(PATH + \"NER_train.tsv\")\n","PATH_TEST = os.path.join(PATH + \"NER_test.tsv\")\n","PATH_LABEL = os.path.join(PATH + \"NER_label.txt\")"],"metadata":{"id":"XXH15AwtHr0N","executionInfo":{"status":"ok","timestamp":1664455896089,"user_tz":-540,"elapsed":5,"user":{"displayName":"서준혁","userId":"07154100412931741259"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["def readFile(path):\n","  with open(path, \"r\", encoding=\"utf-8\") as f:\n","    sentences = []\n","    labels = []\n","    for lines in f:\n","      lines = lines.split(\"\\n\")\n","      for line in lines:\n","        splitLine = line.split(\"\\t\")\n","        if len(splitLine) != 3:\n","          continue\n","        sentences.append(splitLine[1])\n","        labels.append(splitLine[2])\n","    return sentences, labels\n","  \n","train_sentences, train_labels = readFile(PATH_TRAIN)\n","test_sentences, test_labels = readFile(PATH_TEST)\n","ner_sentences = train_sentences + test_sentences\n","ner_labels = train_labels + test_labels\n","\n","ner_dict = {\"sentence\" : ner_sentences, \"label\" : ner_labels}\n","ner_df = pd.DataFrame(ner_dict)\n","\n","print(\"Train NER_Data Amounts : {}\".format(len(train_sentences)))\n","print(\"Test NER_Data Amounts : {}\".format(len(test_sentences)))\n","print(\"Total NER_Data Amounts : {}\".format(len(ner_df)))\n","\n","train_set = pd.Series(ner_df[\"sentence\"].tolist())\n","print(\"Single Sentece Amounts : {}\".format(len(np.unique(train_set))))\n","print(\"Duplicated Sentence Amounts : {}\".format(np.sum(train_set.value_counts() > 1)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oocvmBAPIVG2","executionInfo":{"status":"ok","timestamp":1664455899080,"user_tz":-540,"elapsed":2995,"user":{"displayName":"서준혁","userId":"07154100412931741259"}},"outputId":"33b746e0-e2bd-4c23-e2d2-ce81203d22c8"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Train NER_Data Amounts : 837041\n","Test NER_Data Amounts : 226530\n","Total NER_Data Amounts : 1063571\n","Single Sentece Amounts : 331196\n","Duplicated Sentence Amounts : 97465\n"]}]},{"cell_type":"code","source":["plt.figure(figsize=(12, 5))\n","plt.hist(train_set.value_counts(), bins=50, alpha=0.5, color='b', label='word')\n","plt.yscale('log', nonposy='clip')\n","plt.title('Log-Histogram of Sentence Apperance Counts')\n","plt.xlabel('Number of Occurrences of Sentence')\n","plt.ylabel('Number of Sentece')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":368},"id":"AdzUTbEnRKW2","executionInfo":{"status":"ok","timestamp":1664455900656,"user_tz":-540,"elapsed":1078,"user":{"displayName":"서준혁","userId":"07154100412931741259"}},"outputId":"f8e43fda-f635-481e-dd74-df58cc71f836"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0, 0.5, 'Number of Sentece')"]},"metadata":{},"execution_count":7},{"output_type":"display_data","data":{"text/plain":["<Figure size 864x360 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["print(\"Maximum Duplication Counts : {}\".format(np.max(train_set.value_counts())))\n","print(\"Minimum Duplication Counts : {}\".format(np.min(train_set.value_counts())))\n","print(\"Average Duplication Coutns : {:.2f}\".format(np.mean(train_set.value_counts())))\n","print(\"Duplication Standard Deviation : {:.2f}\".format(np.std(train_set.value_counts())))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"coRos6JyRpcZ","executionInfo":{"status":"ok","timestamp":1664455902615,"user_tz":-540,"elapsed":1961,"user":{"displayName":"서준혁","userId":"07154100412931741259"}},"outputId":"8c656f41-802c-4390-a705-0ac1665e8b4b"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Maximum Duplication Counts : 74236\n","Minimum Duplication Counts : 1\n","Average Duplication Coutns : 3.21\n","Duplication Standard Deviation : 132.30\n"]}]},{"cell_type":"code","source":["train_length = train_set.apply(len)\n","train_length"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QUWyICvABe8Q","executionInfo":{"status":"ok","timestamp":1664455903659,"user_tz":-540,"elapsed":1050,"user":{"displayName":"서준혁","userId":"07154100412931741259"}},"outputId":"3996adfe-2189-4527-f1c4-c1bb7d439657"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0          4\n","1          2\n","2          2\n","3          3\n","4          2\n","          ..\n","1063566    2\n","1063567    2\n","1063568    4\n","1063569    2\n","1063570    1\n","Length: 1063571, dtype: int64"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["print(\"Maximum Sentence Length : {}\".format(np.max(train_length)))\n","print(\"Average Sentence Length : {:.2f}\".format(np.mean(train_length)))\n","print(\"Standard Deviation of Sentence Length : {:.2f}\".format(np.std(train_length)))\n","print(\"Middle Value of Sentence Length : {}\".format(np.median(train_length)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"x57Fn1YHBmJK","executionInfo":{"status":"ok","timestamp":1664455903660,"user_tz":-540,"elapsed":9,"user":{"displayName":"서준혁","userId":"07154100412931741259"}},"outputId":"a1990b0b-ee44-467e-933a-2b626e64ede1"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Maximum Sentence Length : 53\n","Average Sentence Length : 3.39\n","Standard Deviation of Sentence Length : 2.20\n","Middle Value of Sentence Length : 3.0\n"]}]},{"cell_type":"code","source":["plt.figure(figsize=(10, 5))\n","plt.hist(train_length, bins=25, range=[0, 25], facecolor='b', density=True, label='train')\n","plt.title(\"Distribution of Chracter Count in Sentence\", fontsize=15)\n","plt.legend()\n","plt.xlabel(\"Number of Characters\", fontsize=15)\n","plt.ylabel(\"Probability\", fontsize=15)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":375},"id":"nwmsdP7MB_1S","executionInfo":{"status":"ok","timestamp":1664455904377,"user_tz":-540,"elapsed":722,"user":{"displayName":"서준혁","userId":"07154100412931741259"}},"outputId":"22d2bd53-575e-4461-c82f-9177d941aaf8"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0, 0.5, 'Probability')"]},"metadata":{},"execution_count":11},{"output_type":"display_data","data":{"text/plain":["<Figure size 720x360 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["qmarks = np.mean(train_set.apply(lambda x: '?' in x))\n","math = np.mean(train_set.apply(lambda x: '[math]' in x))\n","fullstop = np.mean(train_set.apply(lambda x: '.' in x))\n","numbers = np.mean(train_set.apply(lambda x: max([y.isdigit() for y in x])))\n","\n","print(\"Question Marks in a Sentence : {:.2f}%\".format(qmarks * 100))\n","print(\"Mathematic Tags in a Sentence : {:.2f}%\".format(math * 100))\n","print(\"Including Stop Character in a Sentence : {:.2f}%\".format(fullstop * 100))\n","print(\"Including Number in a Sentence : {:.2f}%\".format(numbers * 100))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YeDyPjogDNap","executionInfo":{"status":"ok","timestamp":1664455907575,"user_tz":-540,"elapsed":3201,"user":{"displayName":"서준혁","userId":"07154100412931741259"}},"outputId":"b0b19810-465c-41f3-d9e3-7b2191ce9f05"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Question Marks in a Sentence : 0.19%\n","Mathematic Tags in a Sentence : 0.00%\n","Including Stop Character in a Sentence : 7.67%\n","Including Number in a Sentence : 7.09%\n"]}]},{"cell_type":"code","source":["tokenizer = BertTokenizer.from_pretrained('bert-base-multilingual-cased', cache_dir='bert_ckpt', do_lower_case=False)\n","train_bert_token_counts = train_set.apply(lambda x: len(tokenizer.tokenize(x)))"],"metadata":{"id":"GAL-x-pbEqjZ","executionInfo":{"status":"ok","timestamp":1664455963049,"user_tz":-540,"elapsed":55485,"user":{"displayName":"서준혁","userId":"07154100412931741259"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["plt.figure(figsize=(10, 10))\n","plt.hist(train_bert_token_counts, bins=25, range=[0, 20], facecolor='r', density=True, label='train')\n","plt.title(\"Distribution of tokens count in sentence\", fontsize=15)\n","plt.legend()\n","plt.xlabel(\"Number of Tokens\", fontsize=15)\n","plt.ylabel(\"Probability\", fontsize=15)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":646},"id":"K--rGVn3E6fk","executionInfo":{"status":"ok","timestamp":1664455963052,"user_tz":-540,"elapsed":26,"user":{"displayName":"서준혁","userId":"07154100412931741259"}},"outputId":"f424518d-9255-4df7-d940-e1072160a755"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0, 0.5, 'Probability')"]},"metadata":{},"execution_count":14},{"output_type":"display_data","data":{"text/plain":["<Figure size 720x720 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["print(\"Maximum Tokens Amounts in a Sentence : {}\".format(np.max(train_bert_token_counts)))\n","print(\"Average Tokens Amounts in a Sentence : {:.2f}\".format(np.mean(train_bert_token_counts)))\n","print(\"Standard Deviation of Tokens Amounts : {:.2f}\".format(np.std(train_bert_token_counts)))\n","print(\"Middle Value of Tokens Amounts : {}\".format(np.median(train_bert_token_counts)))\n","print(\"99 Percents of Tokens Amounts : {}\".format(np.percentile(train_bert_token_counts, 99)))\n","print(\"100 Percents of Tokens Amounts : {}\".format(np.percentile(train_bert_token_counts, 100)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"08BUvjbUFi3h","executionInfo":{"status":"ok","timestamp":1664455963619,"user_tz":-540,"elapsed":588,"user":{"displayName":"서준혁","userId":"07154100412931741259"}},"outputId":"cd3aa131-d317-4f59-d55f-8639e52d6015"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["Maximum Tokens Amounts in a Sentence : 33\n","Average Tokens Amounts in a Sentence : 2.84\n","Standard Deviation of Tokens Amounts : 1.76\n","Middle Value of Tokens Amounts : 3.0\n","99 Percents of Tokens Amounts : 9.0\n","100 Percents of Tokens Amounts : 33.0\n"]}]},{"cell_type":"code","source":["!pip install transformers==3.0.2"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mxEuAmxgDbwc","executionInfo":{"status":"ok","timestamp":1664455966446,"user_tz":-540,"elapsed":2829,"user":{"displayName":"서준혁","userId":"07154100412931741259"}},"outputId":"1f73d682-05f2-4b47-ea76-2e55231f9598"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: transformers==3.0.2 in /usr/local/lib/python3.7/dist-packages (3.0.2)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from transformers==3.0.2) (1.21.6)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.7/dist-packages (from transformers==3.0.2) (21.3)\n","Requirement already satisfied: tokenizers==0.8.1.rc1 in /usr/local/lib/python3.7/dist-packages (from transformers==3.0.2) (0.8.1rc1)\n","Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.7/dist-packages (from transformers==3.0.2) (4.64.1)\n","Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.7/dist-packages (from transformers==3.0.2) (2022.6.2)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.7/dist-packages (from transformers==3.0.2) (3.8.0)\n","Requirement already satisfied: sentencepiece!=0.1.92 in /usr/local/lib/python3.7/dist-packages (from transformers==3.0.2) (0.1.97)\n","Requirement already satisfied: sacremoses in /usr/local/lib/python3.7/dist-packages (from transformers==3.0.2) (0.0.53)\n","Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from transformers==3.0.2) (2.23.0)\n","Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging->transformers==3.0.2) (3.0.9)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests->transformers==3.0.2) (1.24.3)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->transformers==3.0.2) (2.10)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->transformers==3.0.2) (3.0.4)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests->transformers==3.0.2) (2022.6.15)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.7/dist-packages (from sacremoses->transformers==3.0.2) (1.1.0)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from sacremoses->transformers==3.0.2) (1.15.0)\n","Requirement already satisfied: click in /usr/local/lib/python3.7/dist-packages (from sacremoses->transformers==3.0.2) (7.1.2)\n"]}]},{"cell_type":"code","source":["!pip install seqeval"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"p3V-gQ9UDfQX","executionInfo":{"status":"ok","timestamp":1664455969536,"user_tz":-540,"elapsed":3094,"user":{"displayName":"서준혁","userId":"07154100412931741259"}},"outputId":"22a615ea-2d8c-4347-d0ba-24f231f7da74"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: seqeval in /usr/local/lib/python3.7/dist-packages (1.2.2)\n","Requirement already satisfied: numpy>=1.14.0 in /usr/local/lib/python3.7/dist-packages (from seqeval) (1.21.6)\n","Requirement already satisfied: scikit-learn>=0.21.3 in /usr/local/lib/python3.7/dist-packages (from seqeval) (1.0.2)\n","Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn>=0.21.3->seqeval) (1.1.0)\n","Requirement already satisfied: scipy>=1.1.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn>=0.21.3->seqeval) (1.7.3)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn>=0.21.3->seqeval) (3.1.0)\n"]}]},{"cell_type":"code","source":["!pip install tensorflow"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uZcvvM51D-Xm","executionInfo":{"status":"ok","timestamp":1664455972590,"user_tz":-540,"elapsed":3058,"user":{"displayName":"서준혁","userId":"07154100412931741259"}},"outputId":"4579ee3a-dff6-412a-b804-8e46df1d3639"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: tensorflow in /usr/local/lib/python3.7/dist-packages (2.8.2+zzzcolab20220719082949)\n","Requirement already satisfied: h5py>=2.9.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (3.1.0)\n","Requirement already satisfied: keras<2.9,>=2.8.0rc0 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (2.8.0)\n","Requirement already satisfied: libclang>=9.0.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (14.0.6)\n","Requirement already satisfied: tensorflow-estimator<2.9,>=2.8 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (2.8.0)\n","Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (4.1.1)\n","Requirement already satisfied: tensorboard<2.9,>=2.8 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (2.8.0)\n","Requirement already satisfied: gast>=0.2.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (0.5.3)\n","Requirement already satisfied: protobuf<3.20,>=3.9.2 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (3.17.3)\n","Requirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (1.15.0)\n","Requirement already satisfied: wrapt>=1.11.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (1.14.1)\n","Requirement already satisfied: keras-preprocessing>=1.1.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (1.1.2)\n","Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (1.48.1)\n","Requirement already satisfied: numpy>=1.20 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (1.21.6)\n","Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (1.1.0)\n","Requirement already satisfied: flatbuffers>=1.12 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (2.0.7)\n","Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (1.6.3)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from tensorflow) (57.4.0)\n","Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (3.3.0)\n","Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (0.26.0)\n","Requirement already satisfied: absl-py>=0.4.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (1.2.0)\n","Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow) (0.2.0)\n","Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.7/dist-packages (from astunparse>=1.6.0->tensorflow) (0.37.1)\n","Requirement already satisfied: cached-property in /usr/local/lib/python3.7/dist-packages (from h5py>=2.9.0->tensorflow) (1.5.2)\n","Requirement already satisfied: tensorboard-plugin-wit>=1.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.9,>=2.8->tensorflow) (1.8.1)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.9,>=2.8->tensorflow) (3.4.1)\n","Requirement already satisfied: google-auth<3,>=1.6.3 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.9,>=2.8->tensorflow) (1.35.0)\n","Requirement already satisfied: tensorboard-data-server<0.7.0,>=0.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.9,>=2.8->tensorflow) (0.6.1)\n","Requirement already satisfied: google-auth-oauthlib<0.5,>=0.4.1 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.9,>=2.8->tensorflow) (0.4.6)\n","Requirement already satisfied: werkzeug>=0.11.15 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.9,>=2.8->tensorflow) (1.0.1)\n","Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.9,>=2.8->tensorflow) (2.23.0)\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.7/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.9,>=2.8->tensorflow) (0.2.8)\n","Requirement already satisfied: cachetools<5.0,>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.9,>=2.8->tensorflow) (4.2.4)\n","Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.7/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.9,>=2.8->tensorflow) (4.9)\n","Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.7/dist-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.9,>=2.8->tensorflow) (1.3.1)\n","Requirement already satisfied: importlib-metadata>=4.4 in /usr/local/lib/python3.7/dist-packages (from markdown>=2.6.8->tensorboard<2.9,>=2.8->tensorflow) (4.12.0)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata>=4.4->markdown>=2.6.8->tensorboard<2.9,>=2.8->tensorflow) (3.8.1)\n","Requirement already satisfied: pyasn1<0.5.0,>=0.4.6 in /usr/local/lib/python3.7/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.9,>=2.8->tensorflow) (0.4.8)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard<2.9,>=2.8->tensorflow) (2.10)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard<2.9,>=2.8->tensorflow) (3.0.4)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard<2.9,>=2.8->tensorflow) (1.24.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard<2.9,>=2.8->tensorflow) (2022.6.15)\n","Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.7/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.9,>=2.8->tensorflow) (3.2.0)\n"]}]},{"cell_type":"code","source":["import os\n","import re\n","import numpy as np\n","from tqdm import tqdm\n","import json\n","import copy\n","import tensorflow as tf\n","from transformers import *\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\n","from seqeval.metrics import precision_score, recall_score, f1_score, classification_report\n","import pandas as pd\n","import matplotlib.pyplot as plt"],"metadata":{"id":"yA7MUFEdDnj2","executionInfo":{"status":"ok","timestamp":1664455972591,"user_tz":-540,"elapsed":7,"user":{"displayName":"서준혁","userId":"07154100412931741259"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["tf.random.set_seed(1234)\n","np.random.seed(1234)\n","\n","BATCH_SIZE = 64\n","NUM_EPOCHS = 3\n","MAX_LEN = 53"],"metadata":{"id":"2lYVnUZGJSRS","executionInfo":{"status":"ok","timestamp":1664455972591,"user_tz":-540,"elapsed":6,"user":{"displayName":"서준혁","userId":"07154100412931741259"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":["def readFile(path):\n","  with open(path, \"r\", encoding=\"utf-8\") as f:\n","    sentences = []\n","    labels = []\n","    for lines in f:\n","      lines = lines.split(\"\\n\")\n","      for line in lines:\n","        splitLine = line.split(\"\\t\")\n","        if len(splitLine) != 3:\n","          continue\n","        sentences.append(splitLine[1])\n","        labels.append(splitLine[2])\n","    return sentences, labels\n","  \n","train_sentences, train_labels = readFile(PATH_TRAIN)\n","train_ner_dict = {\"sentence\": train_sentences, \"label\": train_labels}\n","train_ner_df = pd.DataFrame(train_ner_dict)\n","\n","train_sentences, train_labels = readFile(PATH_TEST)\n","test_ner_dict = {\"sentence\": test_sentences, \"label\": test_labels}\n","test_ner_df = pd.DataFrame(test_ner_dict)\n","\n","print(\"개체명 인식 학습 데이터 개수 : {}\".format(len(train_ner_df)))\n","print(\"개체명 인식 테스트 데이터 개수 : {}\".format(len(test_ner_df)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7sDQDW8MIoMW","executionInfo":{"status":"ok","timestamp":1664455974236,"user_tz":-540,"elapsed":1650,"user":{"displayName":"서준혁","userId":"07154100412931741259"}},"outputId":"d9797828-296d-4b19-9bc9-24cd0a58461e"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["개체명 인식 학습 데이터 개수 : 837041\n","개체명 인식 테스트 데이터 개수 : 226530\n"]}]},{"cell_type":"code","source":["def get_labels(label_path):\n","  return [label.strip() for label in open(os.path.join(label_path), 'r', encoding='utf-8')]\n","\n","ner_labels = get_labels(PATH_LABEL)\n","print(\"Label Amounts : {}\".format(len(ner_labels)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7jur21b4ECr5","executionInfo":{"status":"ok","timestamp":1664455974238,"user_tz":-540,"elapsed":10,"user":{"displayName":"서준혁","userId":"07154100412931741259"}},"outputId":"a0afb23d-712b-4811-9b4b-813b6adb83f3"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["Label Amounts : 30\n"]}]},{"cell_type":"code","source":["tokenizer = BertTokenizer.from_pretrained(\"bert-base-multilingual-cased\", cache_dir='bert_ckpt')\n","pad_token_id = tokenizer.pad_token_id\n","pad_token_label_id = 0\n","cls_token_label_id = 0\n","sep_token_label_id = 0"],"metadata":{"id":"BJ1NwycfE4EA","executionInfo":{"status":"ok","timestamp":1664455974786,"user_tz":-540,"elapsed":553,"user":{"displayName":"서준혁","userId":"07154100412931741259"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["def bert_tokenizer(sent, MAX_LEN):\n","  encoded_dict = tokenizer.encode_plus(\n","      text = sent,\n","      truncation = True,\n","      add_special_tokens = True,\n","      max_length = MAX_LEN,\n","      pad_to_max_length = True,\n","      return_attention_mask = True\n","  )\n","\n","  input_id = encoded_dict['input_ids']\n","  attention_mask = encoded_dict['attention_mask']\n","  token_type_id = encoded_dict['token_type_ids']\n","\n","  return input_id, attention_mask, token_type_id"],"metadata":{"id":"QOYwRUezFGTn","executionInfo":{"status":"ok","timestamp":1664455974786,"user_tz":-540,"elapsed":2,"user":{"displayName":"서준혁","userId":"07154100412931741259"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["def convert_label(words, labels_idx, ner_begin_label, max_seq_len):\n","  tokens = []\n","  label_ids = []\n","\n","  for word, slot_label in zip(words, labels_idx):\n","    word_tokens = tokenizer.tokenize(word)\n","    if not word_tokens:\n","      word_tokens = ['unk_token']\n","    tokens.extend(word_tokens)\n","\n","    if int(slot_label) in ner_begin_label:\n","      label_ids.extend([int(slot_label)] + [int(slot_label) + 1] * (len(word_tokens) - 1))\n","    else:\n","      label_ids.extend([int(slot_label)] * len(word_tokens))\n","  \n","  special_tokens_count = 2\n","  if len(label_ids) > max_seq_len - special_tokens_count:\n","    label_ids = label_ids[: (max_seq_len - special_tokens_count)]\n","  \n","  label_ids += [sep_token_label_id]\n","  label_ids = [cls_token_label_id] + label_ids\n","\n","  padding_length = max_seq_len - len(label_ids)\n","  label_ids = label_ids + ([pad_token_label_id] * padding_length)\n","\n","  return label_ids"],"metadata":{"id":"CViTwExDFfo6","executionInfo":{"status":"ok","timestamp":1664455975347,"user_tz":-540,"elapsed":563,"user":{"displayName":"서준혁","userId":"07154100412931741259"}}},"execution_count":25,"outputs":[]},{"cell_type":"code","source":["tokenizer.tokenize(\"안녕하세요\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DdDArQJ-Ge61","executionInfo":{"status":"ok","timestamp":1664455975348,"user_tz":-540,"elapsed":15,"user":{"displayName":"서준혁","userId":"07154100412931741259"}},"outputId":"b2c196a4-e499-4492-e271-078ce6b1562f"},"execution_count":26,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['안', '##녕', '##하', '##세', '##요']"]},"metadata":{},"execution_count":26}]},{"cell_type":"code","source":["ner_begin_label = [ner_labels.index(begin_label) for begin_label in ner_labels if 'B' in begin_label]\n","ner_begin_label_string = [ner_labels[label_index] for label_index in ner_begin_label]\n","\n","print(ner_begin_label)\n","print(ner_begin_label_string)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"c9ZcabfSGiGp","executionInfo":{"status":"ok","timestamp":1664455975348,"user_tz":-540,"elapsed":13,"user":{"displayName":"서준혁","userId":"07154100412931741259"}},"outputId":"af416d0c-8cf0-400a-85eb-6bb954de213e"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28]\n","['PER_B', 'FLD_B', 'AFW_B', 'ORG_B', 'LOC_B', 'CVL_B', 'DAT_B', 'TIM_B', 'NUM_B', 'EVT_B', 'ANM_B', 'PLT_B', 'MAT_B', 'TRM_B']\n"]}]},{"cell_type":"code","source":["ner_begin_label = [ner_labels.index(begin_label) for begin_label in ner_labels if 'B' in begin_label]\n","\n","def create_inputs_targets(df):\n","  input_ids = []\n","  attention_masks = []\n","  token_type_ids = []\n","  label_list = []\n","\n","  for i, data in enumerate(df[['sentence', 'label']].values):\n","    sentence, labels = data\n","    words = sentence.split()\n","    labels = labels.split()\n","    labels_idx = []\n","\n","    for label in labels:\n","      labels_idx.append(ner_labels.index(label) if label in ner_labels else ner_labels.index(\"UNK\"))\n","\n","    assert len(words) == len(labels_idx)\n","\n","    input_id, attention_mask, token_type_id = bert_tokenizer(sentence, MAX_LEN)\n","    convert_label_id = convert_label(words, labels_idx, ner_begin_label, MAX_LEN)\n","\n","    input_ids.append(input_id)\n","    attention_masks.append(attention_mask)\n","    token_type_ids.append(token_type_id)\n","    label_list.append(convert_label_id)\n","  \n","  input_ids = np.array(input_ids, dtype=int)\n","  attention_masks = np.array(attention_masks, dtype=int)\n","  token_type_ids = np.array(token_type_ids, dtype=int)\n","  label_list = np.asarray(label_list, dtype=int)\n","  inputs = (input_ids, attention_masks, token_type_ids)\n","\n","  return inputs, label_list\n","\n","train_inputs, train_labels = create_inputs_targets(train_ner_df)\n","test_inputs, test_labels = create_inputs_targets(test_ner_df)"],"metadata":{"id":"GB3wQ189G0QE","executionInfo":{"status":"ok","timestamp":1664456195026,"user_tz":-540,"elapsed":219685,"user":{"displayName":"서준혁","userId":"07154100412931741259"}}},"execution_count":28,"outputs":[]},{"cell_type":"code","source":["train_inputs"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zSYln3PmIPv5","executionInfo":{"status":"ok","timestamp":1664456195028,"user_tz":-540,"elapsed":16,"user":{"displayName":"서준혁","userId":"07154100412931741259"}},"outputId":"eb0428da-5ff4-4b88-c025-e4f664cee862"},"execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(array([[   101,   9379,  26444, ...,      0,      0,      0],\n","        [   101,   9543,  18392, ...,      0,      0,      0],\n","        [   101,   9248,  10530, ...,      0,      0,      0],\n","        ...,\n","        [   101,   9061,  14153, ...,      0,      0,      0],\n","        [   101,   9098, 119138, ...,      0,      0,      0],\n","        [   101,    119,    102, ...,      0,      0,      0]]),\n"," array([[1, 1, 1, ..., 0, 0, 0],\n","        [1, 1, 1, ..., 0, 0, 0],\n","        [1, 1, 1, ..., 0, 0, 0],\n","        ...,\n","        [1, 1, 1, ..., 0, 0, 0],\n","        [1, 1, 1, ..., 0, 0, 0],\n","        [1, 1, 1, ..., 0, 0, 0]]),\n"," array([[0, 0, 0, ..., 0, 0, 0],\n","        [0, 0, 0, ..., 0, 0, 0],\n","        [0, 0, 0, ..., 0, 0, 0],\n","        ...,\n","        [0, 0, 0, ..., 0, 0, 0],\n","        [0, 0, 0, ..., 0, 0, 0],\n","        [0, 0, 0, ..., 0, 0, 0]]))"]},"metadata":{},"execution_count":29}]},{"cell_type":"code","source":["train_labels"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"o76jdJbXLXdk","executionInfo":{"status":"ok","timestamp":1664456195029,"user_tz":-540,"elapsed":13,"user":{"displayName":"서준혁","userId":"07154100412931741259"}},"outputId":"5060fe85-5b89-4d37-c11e-2008fe497c9f"},"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 0,  2,  3, ...,  0,  0,  0],\n","       [ 0, 14, 15, ...,  0,  0,  0],\n","       [ 0,  1,  1, ...,  0,  0,  0],\n","       ...,\n","       [ 0,  1,  1, ...,  0,  0,  0],\n","       [ 0,  1,  1, ...,  0,  0,  0],\n","       [ 0,  1,  0, ...,  0,  0,  0]])"]},"metadata":{},"execution_count":30}]},{"cell_type":"code","source":["class TFBertNERClassifier(tf.keras.Model):\n","    def __init__(self, model_name, dir_path, num_class):\n","        super(TFBertNERClassifier, self).__init__()\n","\n","        self.bert = TFBertModel.from_pretrained(model_name, cache_dir=dir_path)\n","        self.dropout = tf.keras.layers.Dropout(self.bert.config.hidden_dropout_prob)\n","        self.classifier = tf.keras.layers.Dense(num_class, \n","                                                kernel_initializer=tf.keras.initializers.TruncatedNormal(self.bert.config.initializer_range),\n","                                                name=\"ner_classifier\")\n","\n","    def call(self, inputs, attention_mask=None, token_type_ids=None, training=False):\n","        outputs = self.bert(inputs, attention_mask=attention_mask, token_type_ids=token_type_ids)\n","        sequence_output = outputs[0]\n","                \n","        sequence_output = self.dropout(sequence_output, training=training)\n","        logits = self.classifier(sequence_output)\n","        \n","\n","        return logits"],"metadata":{"id":"XybRvRLwMHc9","executionInfo":{"status":"ok","timestamp":1664456195030,"user_tz":-540,"elapsed":9,"user":{"displayName":"서준혁","userId":"07154100412931741259"}}},"execution_count":31,"outputs":[]},{"cell_type":"code","source":["ner_model = TFBertNERClassifier(model_name='bert-base-multilingual-cased', dir_path='bert_ckpt', num_class=len(ner_labels))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TQ9s-WnoMKvq","executionInfo":{"status":"ok","timestamp":1664456223842,"user_tz":-540,"elapsed":28819,"user":{"displayName":"서준혁","userId":"07154100412931741259"}},"outputId":"3488b8dc-23c0-4e2f-9d20-57a68a8c793e"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:transformers.modeling_tf_utils:Some weights of the model checkpoint at bert-base-multilingual-cased were not used when initializing TFBertModel: ['nsp___cls', 'mlm___cls']\n","- This IS expected if you are initializing TFBertModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPretraining model).\n","- This IS NOT expected if you are initializing TFBertModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).\n","WARNING:transformers.modeling_tf_utils:All the weights of TFBertModel were initialized from the model checkpoint at bert-base-multilingual-cased.\n","If your task is similar to the task the model of the ckeckpoint was trained on, you can already use TFBertModel for predictions without further training.\n"]}]},{"cell_type":"code","source":["def compute_loss(labels, logits):\n","    loss_fn = tf.keras.losses.SparseCategoricalCrossentropy(\n","        from_logits=True, reduction=tf.keras.losses.Reduction.NONE\n","    )\n","\n","    active_loss = tf.reshape(labels, (-1,)) != 0\n","        \n","    reduced_logits = tf.boolean_mask(tf.reshape(logits, (-1, shape_list(logits)[2])), active_loss)\n","        \n","    labels = tf.boolean_mask(tf.reshape(labels, (-1,)), active_loss)\n","    \n","    return loss_fn(labels, reduced_logits)"],"metadata":{"id":"ERqW8-6xM4Gr","executionInfo":{"status":"ok","timestamp":1664456223843,"user_tz":-540,"elapsed":33,"user":{"displayName":"서준혁","userId":"07154100412931741259"}}},"execution_count":33,"outputs":[]},{"cell_type":"code","source":["class F1Metrics(tf.keras.callbacks.Callback):\n","    def __init__(self, x_eval, y_eval):\n","        self.x_eval = x_eval\n","        self.y_eval = y_eval\n","\n","    def compute_f1_pre_rec(self, labels, preds):\n","\n","        return {\n","            \"precision\": precision_score(labels, preds, suffix=True),\n","            \"recall\": recall_score(labels, preds, suffix=True),\n","            \"f1\": f1_score(labels, preds, suffix=True)\n","        }\n","\n","\n","    def show_report(self, labels, preds):\n","        return classification_report(labels, preds, suffix=True)\n","        \n","    def on_epoch_end(self, epoch, logs=None):\n","\n","        results = {}\n","        \n","        pred = self.model.predict(self.x_eval)\n","        label = self.y_eval\n","        pred_argmax = np.argmax(pred, axis = 2)\n","\n","        slot_label_map = {i: label for i, label in enumerate(ner_labels)}\n","\n","        out_label_list = [[] for _ in range(label.shape[0])]\n","        preds_list = [[] for _ in range(label.shape[0])]\n","\n","        for i in range(label.shape[0]):\n","            for j in range(label.shape[1]):\n","                if label[i, j] != 0:\n","                    out_label_list[i].append(slot_label_map[label[i][j]])\n","                    preds_list[i].append(slot_label_map[pred_argmax[i][j]])\n","                    \n","        result = self.compute_f1_pre_rec(out_label_list, preds_list)\n","        results.update(result)\n","\n","        print(\"********\")\n","        print(\"F1 Score\")\n","        for key in sorted(results.keys()):\n","            print(\"{}, {:.4f}\".format(key, results[key]))\n","        print(\"\\n\" + self.show_report(out_label_list, preds_list))\n","        print(\"********\")\n","\n","f1_score_callback = F1Metrics(test_inputs, test_labels)"],"metadata":{"id":"tYivBQo0M5y4","executionInfo":{"status":"ok","timestamp":1664456223843,"user_tz":-540,"elapsed":32,"user":{"displayName":"서준혁","userId":"07154100412931741259"}}},"execution_count":34,"outputs":[]},{"cell_type":"code","source":["optimizer = tf.keras.optimizers.Adam(3e-5)\n","ner_model.compile(optimizer=optimizer, loss=compute_loss)"],"metadata":{"id":"4AKNKPgDNAMO","executionInfo":{"status":"ok","timestamp":1664456223843,"user_tz":-540,"elapsed":32,"user":{"displayName":"서준혁","userId":"07154100412931741259"}}},"execution_count":35,"outputs":[]},{"cell_type":"code","source":["a=np.array([[[1,3,2],[4,5,6]],[[10,11,12],[9,8,7]]])"],"metadata":{"id":"HfPLIBhvNC-w","executionInfo":{"status":"ok","timestamp":1664456223844,"user_tz":-540,"elapsed":33,"user":{"displayName":"서준혁","userId":"07154100412931741259"}}},"execution_count":36,"outputs":[]},{"cell_type":"code","source":["np.argmax(a,axis=2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"R-plRPaHNEv9","executionInfo":{"status":"ok","timestamp":1664456223844,"user_tz":-540,"elapsed":33,"user":{"displayName":"서준혁","userId":"07154100412931741259"}},"outputId":"8b5ba66b-611c-40df-b6da-3b87d7d48f45"},"execution_count":37,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[1, 2],\n","       [2, 0]])"]},"metadata":{},"execution_count":37}]},{"cell_type":"code","source":["b= [[] for _ in range(5)]\n","c=tf.constant(b)\n","print(b)\n","print(np.array(b).shape)\n","shape_list(c)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XWEu13p2NF44","executionInfo":{"status":"ok","timestamp":1664456223844,"user_tz":-540,"elapsed":30,"user":{"displayName":"서준혁","userId":"07154100412931741259"}},"outputId":"1106961b-a0f2-4920-ff1f-fa623ae3c6f2"},"execution_count":38,"outputs":[{"output_type":"stream","name":"stdout","text":["[[], [], [], [], []]\n","(5, 0)\n"]},{"output_type":"execute_result","data":{"text/plain":["[5, 0]"]},"metadata":{},"execution_count":38}]},{"cell_type":"code","source":["a= {2:'b',3:'c',1:'a'}\n","print(a.keys())\n","print(sorted(a.keys()))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dLeNCmjjNHor","executionInfo":{"status":"ok","timestamp":1664456223845,"user_tz":-540,"elapsed":28,"user":{"displayName":"서준혁","userId":"07154100412931741259"}},"outputId":"be13877c-c363-4768-a477-c46c1ca09015"},"execution_count":39,"outputs":[{"output_type":"stream","name":"stdout","text":["dict_keys([2, 3, 1])\n","[1, 2, 3]\n"]}]},{"cell_type":"code","source":["a={'b':2,'c':3,'a':1}\n","b={'a':2,'b':2,'c':4}"],"metadata":{"id":"EJaSNB3DNKI-","executionInfo":{"status":"ok","timestamp":1664456223845,"user_tz":-540,"elapsed":26,"user":{"displayName":"서준혁","userId":"07154100412931741259"}}},"execution_count":40,"outputs":[]},{"cell_type":"code","source":["print(a.keys())\n","print(sorted(a.keys()))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"k26_H-99NLN1","executionInfo":{"status":"ok","timestamp":1664456223845,"user_tz":-540,"elapsed":25,"user":{"displayName":"서준혁","userId":"07154100412931741259"}},"outputId":"2cc7e4d5-4e8d-4943-c87d-09c351895ab8"},"execution_count":41,"outputs":[{"output_type":"stream","name":"stdout","text":["dict_keys(['b', 'c', 'a'])\n","['a', 'b', 'c']\n"]}]},{"cell_type":"code","source":["r={}\n","r.update(a)\n","r"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-I2cX-83NMYy","executionInfo":{"status":"ok","timestamp":1664456223846,"user_tz":-540,"elapsed":24,"user":{"displayName":"서준혁","userId":"07154100412931741259"}},"outputId":"334a3e48-b8f5-4fd0-c3ba-56fb987ad3cb"},"execution_count":42,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'b': 2, 'c': 3, 'a': 1}"]},"metadata":{},"execution_count":42}]},{"cell_type":"code","source":["r.update(b)\n","r"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GeKXUl0fNNao","executionInfo":{"status":"ok","timestamp":1664456223846,"user_tz":-540,"elapsed":21,"user":{"displayName":"서준혁","userId":"07154100412931741259"}},"outputId":"b0866a1a-21e4-49a0-a441-9385c5c6cd1f"},"execution_count":43,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'b': 2, 'c': 4, 'a': 2}"]},"metadata":{},"execution_count":43}]},{"cell_type":"code","source":["model_name = \"tf2_bert_ner\"\n","PATH_OUT = \"out\"\n","\n","checkpoint_path = os.path.join(PATH_OUT, model_name, 'weights.h5')\n","checkpoint_dir = os.path.dirname(checkpoint_path)\n","\n","# Create path if exists\n","if os.path.exists(checkpoint_dir):\n","    print(\"{} -- Folder already exists \\n\".format(checkpoint_dir))\n","else:\n","    os.makedirs(checkpoint_dir, exist_ok=True)\n","    print(\"{} -- Folder create complete \\n\".format(checkpoint_dir))\n","    \n","cp_callback = ModelCheckpoint(\n","    checkpoint_path, verbose=1, save_best_only=True, save_weights_only=True)\n","\n","history = ner_model.fit(train_inputs, train_labels, batch_size=BATCH_SIZE, epochs=NUM_EPOCHS,\n","                        callbacks=[cp_callback, f1_score_callback])\n","\n","print(history.history)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gXsOroExNOvA","outputId":"8338f365-f48b-4bed-a4d0-02892aab0d27"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["out/tf2_bert_ner -- Folder already exists \n","\n","Epoch 1/3\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:Gradients do not exist for variables ['tf_bert_model/bert/pooler/dense/kernel:0', 'tf_bert_model/bert/pooler/dense/bias:0'] when minimizing the loss. If you're using `model.compile()`, did you forget to provide a `loss`argument?\n","WARNING:tensorflow:Gradients do not exist for variables ['tf_bert_model/bert/pooler/dense/kernel:0', 'tf_bert_model/bert/pooler/dense/bias:0'] when minimizing the loss. If you're using `model.compile()`, did you forget to provide a `loss`argument?\n"]},{"output_type":"stream","name":"stdout","text":["13079/13079 [==============================] - ETA: 0s - loss: 0.5110"]},{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n","/usr/local/lib/python3.7/dist-packages/seqeval/metrics/sequence_labeling.py:167: UserWarning: LOC_B seems not to be NE tag.\n","  warnings.warn('{} seems not to be NE tag.'.format(chunk))\n","/usr/local/lib/python3.7/dist-packages/seqeval/metrics/sequence_labeling.py:167: UserWarning: ORG_B seems not to be NE tag.\n","  warnings.warn('{} seems not to be NE tag.'.format(chunk))\n","/usr/local/lib/python3.7/dist-packages/seqeval/metrics/sequence_labeling.py:167: UserWarning: ORG_I seems not to be NE tag.\n","  warnings.warn('{} seems not to be NE tag.'.format(chunk))\n","/usr/local/lib/python3.7/dist-packages/seqeval/metrics/sequence_labeling.py:167: UserWarning: TRM_B seems not to be NE tag.\n","  warnings.warn('{} seems not to be NE tag.'.format(chunk))\n","/usr/local/lib/python3.7/dist-packages/seqeval/metrics/sequence_labeling.py:167: UserWarning: TRM_I seems not to be NE tag.\n","  warnings.warn('{} seems not to be NE tag.'.format(chunk))\n","/usr/local/lib/python3.7/dist-packages/seqeval/metrics/sequence_labeling.py:167: UserWarning: CVL_B seems not to be NE tag.\n","  warnings.warn('{} seems not to be NE tag.'.format(chunk))\n","/usr/local/lib/python3.7/dist-packages/seqeval/metrics/sequence_labeling.py:167: UserWarning: CVL_I seems not to be NE tag.\n","  warnings.warn('{} seems not to be NE tag.'.format(chunk))\n","/usr/local/lib/python3.7/dist-packages/seqeval/metrics/sequence_labeling.py:167: UserWarning: - seems not to be NE tag.\n","  warnings.warn('{} seems not to be NE tag.'.format(chunk))\n","/usr/local/lib/python3.7/dist-packages/seqeval/metrics/sequence_labeling.py:167: UserWarning: DAT_B seems not to be NE tag.\n","  warnings.warn('{} seems not to be NE tag.'.format(chunk))\n","/usr/local/lib/python3.7/dist-packages/seqeval/metrics/sequence_labeling.py:167: UserWarning: DAT_I seems not to be NE tag.\n","  warnings.warn('{} seems not to be NE tag.'.format(chunk))\n","/usr/local/lib/python3.7/dist-packages/seqeval/metrics/sequence_labeling.py:167: UserWarning: PER_B seems not to be NE tag.\n","  warnings.warn('{} seems not to be NE tag.'.format(chunk))\n","/usr/local/lib/python3.7/dist-packages/seqeval/metrics/sequence_labeling.py:167: UserWarning: PER_I seems not to be NE tag.\n","  warnings.warn('{} seems not to be NE tag.'.format(chunk))\n","/usr/local/lib/python3.7/dist-packages/seqeval/metrics/sequence_labeling.py:167: UserWarning: LOC_I seems not to be NE tag.\n","  warnings.warn('{} seems not to be NE tag.'.format(chunk))\n","/usr/local/lib/python3.7/dist-packages/seqeval/metrics/sequence_labeling.py:167: UserWarning: AFW_B seems not to be NE tag.\n","  warnings.warn('{} seems not to be NE tag.'.format(chunk))\n","/usr/local/lib/python3.7/dist-packages/seqeval/metrics/sequence_labeling.py:167: UserWarning: AFW_I seems not to be NE tag.\n","  warnings.warn('{} seems not to be NE tag.'.format(chunk))\n","/usr/local/lib/python3.7/dist-packages/seqeval/metrics/sequence_labeling.py:167: UserWarning: NUM_B seems not to be NE tag.\n","  warnings.warn('{} seems not to be NE tag.'.format(chunk))\n","/usr/local/lib/python3.7/dist-packages/seqeval/metrics/sequence_labeling.py:167: UserWarning: EVT_B seems not to be NE tag.\n","  warnings.warn('{} seems not to be NE tag.'.format(chunk))\n","/usr/local/lib/python3.7/dist-packages/seqeval/metrics/sequence_labeling.py:167: UserWarning: EVT_I seems not to be NE tag.\n","  warnings.warn('{} seems not to be NE tag.'.format(chunk))\n","/usr/local/lib/python3.7/dist-packages/seqeval/metrics/sequence_labeling.py:167: UserWarning: NUM_I seems not to be NE tag.\n","  warnings.warn('{} seems not to be NE tag.'.format(chunk))\n","/usr/local/lib/python3.7/dist-packages/seqeval/metrics/sequence_labeling.py:167: UserWarning: ANM_B seems not to be NE tag.\n","  warnings.warn('{} seems not to be NE tag.'.format(chunk))\n","/usr/local/lib/python3.7/dist-packages/seqeval/metrics/sequence_labeling.py:167: UserWarning: ANM_I seems not to be NE tag.\n","  warnings.warn('{} seems not to be NE tag.'.format(chunk))\n","/usr/local/lib/python3.7/dist-packages/seqeval/metrics/sequence_labeling.py:167: UserWarning: FLD_B seems not to be NE tag.\n","  warnings.warn('{} seems not to be NE tag.'.format(chunk))\n","/usr/local/lib/python3.7/dist-packages/seqeval/metrics/sequence_labeling.py:167: UserWarning: FLD_I seems not to be NE tag.\n","  warnings.warn('{} seems not to be NE tag.'.format(chunk))\n","/usr/local/lib/python3.7/dist-packages/seqeval/metrics/sequence_labeling.py:167: UserWarning: PLT_B seems not to be NE tag.\n","  warnings.warn('{} seems not to be NE tag.'.format(chunk))\n","/usr/local/lib/python3.7/dist-packages/seqeval/metrics/sequence_labeling.py:167: UserWarning: PLT_I seems not to be NE tag.\n","  warnings.warn('{} seems not to be NE tag.'.format(chunk))\n","/usr/local/lib/python3.7/dist-packages/seqeval/metrics/sequence_labeling.py:167: UserWarning: TIM_B seems not to be NE tag.\n","  warnings.warn('{} seems not to be NE tag.'.format(chunk))\n","/usr/local/lib/python3.7/dist-packages/seqeval/metrics/sequence_labeling.py:167: UserWarning: TIM_I seems not to be NE tag.\n","  warnings.warn('{} seems not to be NE tag.'.format(chunk))\n","/usr/local/lib/python3.7/dist-packages/seqeval/metrics/sequence_labeling.py:167: UserWarning: MAT_B seems not to be NE tag.\n","  warnings.warn('{} seems not to be NE tag.'.format(chunk))\n","/usr/local/lib/python3.7/dist-packages/seqeval/metrics/sequence_labeling.py:167: UserWarning: MAT_I seems not to be NE tag.\n","  warnings.warn('{} seems not to be NE tag.'.format(chunk))\n"]},{"output_type":"stream","name":"stdout","text":["********\n","F1 Score\n","f1, 0.7732\n","precision, 0.7772\n","recall, 0.7693\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/seqeval/metrics/v1.py:57: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]},{"output_type":"stream","name":"stdout","text":["\n","              precision    recall  f1-score   support\n","\n","        AFW_       0.64      0.28      0.39      1286\n","        ANM_       0.68      0.59      0.63      1375\n","        CVL_       0.74      0.74      0.74     12784\n","        DAT_       0.91      0.85      0.88      7212\n","        EVT_       0.81      0.58      0.68      3855\n","        FLD_       0.52      0.53      0.52       502\n","        LOC_       0.72      0.68      0.70      4500\n","        MAT_       0.50      0.08      0.14        49\n","        NUM_       0.86      0.90      0.88     13822\n","        ORG_       0.82      0.77      0.79      9751\n","        PER_       0.75      0.85      0.79     10279\n","        PLT_       0.29      0.15      0.19        48\n","        TIM_       0.84      0.85      0.85       855\n","        TRM_       0.65      0.61      0.63      4766\n","           _       0.00      0.00      0.00         0\n","\n","   micro avg       0.78      0.77      0.77     71084\n","   macro avg       0.65      0.56      0.59     71084\n","weighted avg       0.79      0.77      0.77     71084\n","\n","********\n","\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r13079/13079 [==============================] - 9510s 726ms/step - loss: 0.5110\n","Epoch 2/3\n","13079/13079 [==============================] - ETA: 0s - loss: 0.3689"]},{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:Can save best model only with val_loss available, skipping.\n"]},{"output_type":"stream","name":"stdout","text":["********\n","F1 Score\n","f1, 0.7989\n","precision, 0.7995\n","recall, 0.7984\n","\n","              precision    recall  f1-score   support\n","\n","        AFW_       0.61      0.41      0.49      1286\n","        ANM_       0.66      0.70      0.68      1375\n","        CVL_       0.83      0.75      0.79     12784\n","        DAT_       0.85      0.89      0.87      7212\n","        EVT_       0.80      0.69      0.74      3855\n","        FLD_       0.54      0.55      0.54       502\n","        LOC_       0.79      0.74      0.77      4500\n","        MAT_       1.00      0.12      0.22        49\n","        NUM_       0.91      0.89      0.90     13822\n","        ORG_       0.81      0.82      0.82      9751\n","        PER_       0.85      0.83      0.84     10279\n","        PLT_       0.37      0.27      0.31        48\n","        TIM_       0.86      0.90      0.88       855\n","        TRM_       0.58      0.71      0.64      4766\n","           _       0.00      0.00      0.00         0\n","\n","   micro avg       0.80      0.80      0.80     71084\n","   macro avg       0.70      0.62      0.63     71084\n","weighted avg       0.82      0.80      0.81     71084\n","\n","********\n","13079/13079 [==============================] - 9495s 726ms/step - loss: 0.3689\n","Epoch 3/3\n"," 2465/13079 [====>.........................] - ETA: 1:56:26 - loss: 0.3083"]}]}]}